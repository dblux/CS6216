setwd("~/projects/phd/cs6216/")
setwd("~/projects/phd/cs6216/")
# Naive row-wise two-sample t-test for every gene
# Does a t-test between every row of matrices a and b
# Returns a vector of p-values (length: nrow(a))
row_ttest <- function (a,b) {
tt_pvalue <- numeric(nrow(a))
names(tt_pvalue) <- rownames(a)
for (i in 1:nrow(a)) {
try(tt_pvalue[i] <- t.test(a[i,], b[i,])$p.value, silent = T)
}
return (tt_pvalue)
}
# Load data (179: No relapse, 107: Relapse)
data <- read.table('data/raw/data_entrez1.tsv', sep="\t",
header = T, row.names = 1, strip.white = T)
# Load data (179: No relapse, 107: Relapse)
data <- read.table('data/raw/data_labelled.tsv', sep="\t",
header = T, row.names = 1, strip.white = T)
head(data)
# Save original data to numpy format
write.table(t(reordered_data), "data/gene/genes_all.tsv",
quote = F, sep = "\t", row.names = F, col.names = F)
# Load data (179: No relapse, 107: Relapse)
reordered_data <- read.table('data/raw/data_labelled.tsv', sep="\t",
header = T, row.names = 1, strip.white = T)
# Save original data to numpy format
write.table(t(reordered_data), "data/gene/genes_all.tsv",
quote = F, sep = "\t", row.names = F, col.names = F)
selected_pathways <- list.files("info/kegg_human-edgelist/large/")
setwd("~/projects/phd/cs6216/")
EDGELIST_DIR <- "info/kegg_human-edgelist/large/"
selected_pathways <- list.files(EDGELIST_DIR)
for (pw in selected_pathways) {
print(paste0(EDGELIST_DIR, pw))
# data <- read.table(paste0(EDGELIST_DIR, pw), sep="\t",
#                    header = T, row.names = 1, strip.white = T)
}
for (pw in selected_pathways) {
data <- read.table(paste0(EDGELIST_DIR, pw), sep=" ",
header = F, row.names = F, strip.white = T)
}
for (pw in selected_pathways) {
data <- read.table(paste0(EDGELIST_DIR, pw), sep=" ",
header = F, strip.white = T)
}
data
unlist(data)
type(unlist(data))
class(unlist(data))
length(unlist(data))
unique(unlist(data))
length(unique(unlist(data)))
selected_pathways
lapply(selected_pathways, paste, "he")
sapply(selected_pathways, paste, "he")
sapply(selected_pathways, num_nodes)
num_nodes <- function(fpath) {
data <- read.table(paste0(EDGELIST_DIR, pw), sep=" ",
header = F, strip.white = T)
return(length(unique(unlist(data))))
}
sapply(selected_pathways, num_nodes)
num_nodes <- function(fpath) {
data <- read.table(paste0(EDGELIST_DIR, fpath), sep=" ",
header = F, strip.white = T)
return(length(unique(unlist(data))))
}
sapply(selected_pathways, num_nodes)
pathway_nodes <- sapply(selected_pathways, num_nodes)
setwd("~/projects/phd/cs6216/")
EDGELIST_DIR <- "info/kegg_human-edgelist/large/"
selected_pathways <- list.files(EDGELIST_DIR)
num_nodes <- function(fpath) {
data <- read.table(paste0(EDGELIST_DIR, fpath), sep=" ",
header = F, strip.white = T)
return(unique(unlist(data)))
}
pathway_nodes <- sapply(selected_pathways, num_nodes)
View(pathway_nodes)
pathway_nodes <- sapply(selected_pathways, num_nodes)
head(pathway_nodes)
num_nodes <- function(fpath) {
data <- read.table(paste0(EDGELIST_DIR, fpath), sep=" ",
header = F, strip.white = T)
return(length(unique(unlist(data))))
}
pathway_num_nodes <- sapply(selected_pathways, num_nodes)
pathway_num_nodes
save(pathway_num_nodes, file = "data/pathway_num_nodes.rda")
num_nodes <- function(fpath) {
data <- read.table(paste0(EDGELIST_DIR, fpath), sep=" ",
header = F, strip.white = T)
return(unique(unlist(data)))
}
pathway_nodes <- sapply(selected_pathways, num_nodes)
for (gene_list in pathway_nodes) {
print(names(gene_list))
}
pathway_nodes[1]
pathway_nodes[[1]]
fnames <- names(pathway_nodes)
fnames <- names(pathway_nodes)
for (i in 1:length(pathway_nodes)) {
pathway_nodes[[i]]
print(fnames[i])
}
GENELIST_DIR <- "data/pathway/gene_list/"
fnames <- names(pathway_nodes)
for (i in 1:length(pathway_nodes)) {
write(pathway_nodes[[i]], file = paste0(GENELIST_DIR, fnames[i]), ncolumns = 1)
}
unlist(pathway_nodes)
unname(unlist(pathway_nodes))
length(unname(unlist(pathway_nodes)))
unique(unname(unlist(pathway_nodes)))
pathway_total_nodes <- unique(unname(unlist(pathway_nodes)))
length(pathway_total_nodes)
write(pathway_total_nodes,
file = "data/pathway/all_pathway_nodes.tsv",
ncolumns = 1)
rm(list=ls())
setwd("~/projects/phd/cs6216/")
# Naive row-wise two-sample t-test for every gene
# Does a t-test between every row of matrices a and b
# Returns a vector of p-values (length: nrow(a))
row_ttest <- function (a,b) {
tt_pvalue <- numeric(nrow(a))
names(tt_pvalue) <- rownames(a)
for (i in 1:nrow(a)) {
try(tt_pvalue[i] <- t.test(a[i,], b[i,])$p.value, silent = T)
}
return (tt_pvalue)
}
# Load data (179: No relapse, 107: Relapse)
reordered_data <- read.table('data/raw/data_labelled.tsv', sep="\t",
header = T, row.names = 1, strip.white = T)
head(reordered_data)
# Selects genes based on t-test values
p_value <- row_ttest(no_relapse, relapse)
no_relapse <- reordered_data[,1:179]
relapse <- reordered_data[,180:286]
# Selects genes based on t-test values
p_value <- row_ttest(no_relapse, relapse)
# Select
NUM_GENES <- 100
selected_genes <- names(head(sort(p_value), NUM_GENES))
fltr_data <- reordered_data[rownames(reordered_data) %in% selected_genes,]
heatmap(data.matrix(fltr_data))
# Save filtered data
write.table(t(fltr_data), "data/gene/genes_100.tsv",
quote = F, sep = "\t", row.names = F, col.names = F)
# Select
NUM_GENES <- 20
selected_genes <- names(head(sort(p_value), NUM_GENES))
fltr_data <- reordered_data[rownames(reordered_data) %in% selected_genes,]
# Save filtered data
write.table(t(fltr_data), "data/gene/genes_20.tsv",
quote = F, sep = "\t", row.names = F, col.names = F)
# Select genes that are represented in the pathways
total_pathway_genes <- read.table("data/pathway/all_pathway_nodes.tsv",
sep="\t", header = F, strip.white = T)
View(total_pathway_genes)
unlist(total_pathway_genes)
class(unlist(total_pathway_genes))
rep_genes <- unname(unlist(total_pathway_genes))
rep_genes
rep_genes <- unname(unlist(total_pathway_genes))
fltr_data <- reordered_data[rownames(reordered_data) %in% rep_genes,]
head(fltr_data)
# Save filtered data
write.table(t(fltr_data), "data/gene/genes_1983.tsv",
quote = F, sep = "\t", row.names = F, col.names = F)
# PATHWAY SCORES ----------------------------------------------------------
GENELIST_DIR <- "data/pathway/gene_list/"
fpaths <- list.files(GENELIST_DIR)
pathway_files <- list.files(GENELIST_DIR)
fpath <- "hsa00010.tsv"
data <- read.table(paste0(GENELIST_DIR, fpath),
header = F, strip.white = T)
data
class(data)
class(unlist(data))
unlist(data)
unname(unlist(data))
load_genelist <- function(fpath) {
data <- read.table(paste0(GENELIST_DIR, fpath),
header = F, strip.white = T)
return(unname(unlist(data)))
}
GENELIST_DIR <- "data/pathway/gene_list/"
pathway_files <- list.files(GENELIST_DIR)
genelist_list <- sapply(pathway_files, load_genelist)
genelist_list
length(genelist_list)
genelist <- genelist_list[[1]]
gene_list <- genelist_list[[1]]
fltr_data <- reordered_data[rownames(reordered_data) %in% gene_list,]
apply(fltr_data, 2, mean)
dim(apply(fltr_data, 2, mean))
class(apply(fltr_data, 2, mean))
pathway_score <- function(genelist) {
fltr_data <- reordered_data[rownames(reordered_data) %in% gene_list,]
# Return mean pathway value
return(apply(fltr_data, 2, mean))
}
pathway_list <- sapply(genelist_list, pathway_score)
View(pathway_list)
pathway_list <- lapply(genelist_list, pathway_score)
pathway_list <- sapply(genelist_list, pathway_score)
pathway_values <- sapply(genelist_list, pathway_score)
View(pathway_values)
rownames(pathway_values)
# Save pathway data to numpy format
write.table(pathway_values, "data/pathway/X_pathway.tsv",
quote = F, sep = "\t", row.names = F, col.names = F)
pathway_score <- function(gene_list) {
fltr_data <- reordered_data[rownames(reordered_data) %in% gene_list,]
# Return mean pathway value
return(apply(fltr_data, 2, mean))
}
pathway_values <- sapply(genelist_list, pathway_score)
rownames(pathway_values)
# Save pathway data to numpy format
write.table(pathway_values, "data/pathway/X_pathway.tsv",
quote = F, sep = "\t", row.names = F, col.names = F)
View(pathway_values)
